openapi: 3.0.2
info:
  title: User Management API
  version: 1.0.0
  description: A RESTful API for managing users with database integration.
servers:
  - url: http://localhost:8000
    description: Development server

paths:
  /:
    get:
      summary: Root endpoint
      operationId: getRoot
      tags:
        - Root
      responses:
        '200':
          description: Welcome message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Welcome to the User Management API"

  /users:
    get:
      summary: Get a list of users
      operationId: listUsers
      tags:
        - Users
      parameters:
        - name: skip
          in: query
          description: Number of records to skip
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 1000
        - name: limit
          in: query
          description: Maximum number of users to return
          required: false
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
          links:
            UpdateFirstUser:
              $ref: '#/components/links/UpdateFirstUser'
            DeleteFirstUser:
              $ref: '#/components/links/DeleteFirstUser'
            GetFirstUser:
              $ref: '#/components/links/GetFirstUser'
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: The unique identifier of the user
        schema:
          type: string
          format: uuid
    get:
      summary: Get a specific user by ID
      operationId: getUser
      tags:
        - Users
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          links:
            UpdateThisUser:
              $ref: '#/components/links/UpdateUser'
            DeleteThisUser:
              $ref: '#/components/links/DeleteUser'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing user
      operationId: updateUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - Users
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    UserBase:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
          description: ユーザー名
          minLength: 1
          example: yamada_taro
        email:
          type: string
          format: email
          description: メールアドレス
          example: taro.yamada@example.com
        full_name:
          type: string
          description: 氏名
          example: 山田 太郎
        department:
          type: string
          description: 部署名
          example: 営業部

    UserCreate:
      allOf:
        - $ref: '#/components/schemas/UserBase'

    UserUpdate:
      type: object
      properties:
        username:
          type: string
          description: ユーザー名
          minLength: 1
          example: yamada_taro_updated
        email:
          type: string
          format: email
          description: メールアドレス
          example: taro.yamada.updated@example.com
        full_name:
          type: string
          description: 氏名
          example: 山田 太郎 (更新)
        department:
          type: string
          description: 部署名
          example: 営業部

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: ユーザーの一意識別子
              example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
            created_at:
              type: string
              format: date-time
              description: 作成日時
              example: "2023-01-01T12:00:00Z"
            updated_at:
              type: string
              format: date-time
              description: 更新日時
              example: "2023-01-01T12:00:00Z"

    Error:
      type: object
      properties:
        detail:
          type: string
          description: エラーの詳細メッセージ
          example: "User not found"
          
  links:
    UpdateUser:
      operationId: updateUser
      parameters:
        userId: '$response.body#/id'
      description: >
        The `id` value returned in the response can be used as
        the `userId` parameter in `PUT /users/{userId}`.
    
    DeleteUser:
      operationId: deleteUser
      parameters:
        userId: '$response.body#/id'
      description: >
        The `id` value returned in the response can be used as
        the `userId` parameter in `DELETE /users/{userId}`.
        
    UpdateFirstUser:
      operationId: updateUser
      parameters:
        userId: '$response.body#/0/id'
      description: >
        The `id` value of the first user in the response array can be used as
        the `userId` parameter in `PUT /users/{userId}`.
        
    DeleteFirstUser:
      operationId: deleteUser
      parameters:
        userId: '$response.body#/0/id'
      description: >
        The `id` value of the first user in the response array can be used as
        the `userId` parameter in `DELETE /users/{userId}`.
        
    GetFirstUser:
      operationId: getUser
      parameters:
        userId: '$response.body#/0/id'
      description: >
        The `id` value of the first user in the response array can be used as
        the `userId` parameter in `GET /users/{userId}`.