openapi: 3.0.2
info:
  title: Complex User Profile API
  version: 1.0.0
  description: >
    An example API definition demonstrating more complex data structures and validation
    for testing with Schemathesis. Includes nested objects, arrays, enums, formats,
    and readOnly/writeOnly properties.
servers:
  - url: http://localhost:8000
    description: Development server

paths:
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: The unique identifier of the user.
        schema:
          type: string
          format: uuid

    get:
      summary: Get user profile
      operationId: getUserProfileById
      tags:
        - Users
      responses:
        '200':
          description: Successful retrieval of user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Update user profile
      operationId: updateUserProfileById
      tags:
        - Users
      requestBody:
        description: Fields to update in the user profile.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Successful update of user profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserProfile:
      type: object
      required:
        - userId
        - username
        - email
        - createdAt
        - profile
      properties:
        userId:
          type: string
          format: uuid
          description: Unique identifier for the user.
          readOnly: true
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
          description: Username, alphanumeric, underscores, hyphens allowed.
        email:
          type: string
          format: email
          description: User's email address.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created.
          readOnly: true
        lastLogin:
          type: string
          format: date-time
          description: Timestamp of the last login.
          nullable: true
        isActive:
          type: boolean
          default: true
          description: Flag indicating if the user account is active.
        profile:
          $ref: '#/components/schemas/ProfileDetails'
        tags:
          type: array
          items:
            type: string
            minLength: 1
          maxItems: 10
          description: List of tags associated with the user.
          uniqueItems: true
        preferences:
          type: object
          properties:
            theme:
              type: string
              enum: [light, dark, system]
              default: system
            notifications:
              type: boolean
              default: true
          additionalProperties: false

    ProfileDetails:
      type: object
      properties:
        fullName:
          type: string
          maxLength: 100
          description: User's full name.
        bio:
          type: string
          maxLength: 500
          description: Short biography.
        avatarUrl:
          type: string
          format: url
          description: URL to the user's avatar image.
          nullable: true
        birthDate:
          type: string
          format: date
          description: User's date of birth.
          nullable: true
        address:
          $ref: '#/components/schemas/Address'

    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        postalCode:
          type: string
          pattern: '^[0-9]{5}(?:-[0-9]{4})?$' # US ZIP code format
          description: Postal code (e.g., 12345 or 12345-6789).
        country:
          type: string
          enum: [USA, Canada, Japan, UK]
          description: Country name.
      required:
        - country

    UserProfileUpdate:
      type: object
      description: Subset of UserProfile fields that can be updated.
      # Note: PATCH typically allows partial updates, so fields are optional.
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
          description: Username, alphanumeric, underscores, hyphens allowed.
        email:
          type: string
          format: email
          description: User's email address.
        isActive:
          type: boolean
          description: Flag indicating if the user account is active.
        profile:
          $ref: '#/components/schemas/ProfileDetailsUpdate' # Allow updating nested profile
        tags:
          type: array
          items:
            type: string
            minLength: 1
          maxItems: 10
          description: List of tags associated with the user.
          uniqueItems: true
        preferences:
          type: object
          properties:
            theme:
              type: string
              enum: [light, dark, system]
            notifications:
              type: boolean
          additionalProperties: false
      minProperties: 1 # Must provide at least one field to update

    ProfileDetailsUpdate:
      type: object
      properties:
        fullName:
          type: string
          maxLength: 100
          description: User's full name.
        bio:
          type: string
          maxLength: 500
          description: Short biography.
        avatarUrl:
          type: string
          format: url
          description: URL to the user's avatar image.
          nullable: true
        birthDate:
          type: string
          format: date
          description: User's date of birth.
          nullable: true
        address:
          $ref: '#/components/schemas/Address' # Allow updating address

    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: An application-specific error code.
          example: USER_NOT_FOUND
        message:
          type: string
          description: A human-readable description of the error.
          example: The requested user could not be found.
        details:
          type: object
          description: Additional details about the error (e.g., validation errors).
          additionalProperties: true
